package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"sync"

	"connectrpc.com/connect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	todov1 "github.com/kudoas/todos-by-grpc/gen/todo/v1"        // generated by protoc-gen-go
	"github.com/kudoas/todos-by-grpc/gen/todo/v1/todov1connect" // generated by protoc-gen-connect-go
)

type TaskServer struct {
	store sync.Map
}

type Task struct {
	Id      int32
	Title   string
	Content string
}

func (s *TaskServer) CreateTask(
	ctx context.Context,
	req *connect.Request[todov1.CreateTaskRequest],
) (*connect.Response[todov1.CreateTaskResponse], error) {
	log.Println("Request headers: ", req.Header())

	task := &Task{
		Id:      1,
		Title:   req.Msg.Title,
		Content: req.Msg.Content,
	}

	s.store.Store(task.Id, task)

	res := connect.NewResponse(&todov1.CreateTaskResponse{
		Id:      task.Id,
		Title:   task.Title,
		Content: task.Content,
	})
	res.Header().Set("Greet-Version", "v1")

	stored, _ := s.store.Load(task.Id)

	fmt.Println("stored ", stored)

	return res, nil
}

func main() {
	task := &TaskServer{}
	mux := http.NewServeMux()
	path, handler := todov1connect.NewTaskServiceHandler(task)
	mux.Handle(path, handler)
	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}
