package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"sync"

	"connectrpc.com/connect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	"github.com/google/uuid"
	todov1 "github.com/kudoas/todos-by-grpc/gen/todo/v1"        // generated by protoc-gen-go
	"github.com/kudoas/todos-by-grpc/gen/todo/v1/todov1connect" // generated by protoc-gen-connect-go
)

type TaskServer struct {
	store sync.Map
}

type Task struct {
	Id      string
	Title   string
	Content string
	Status  todov1.Task_Status
}

func (s *TaskServer) Create(
	ctx context.Context,
	req *connect.Request[todov1.CreateRequest],
) (*connect.Response[todov1.CreateResponse], error) {
	log.Println("Request headers: ", req.Header())

	uuid, _ := uuid.NewRandom()
	if _, ok := s.store.Load(uuid); ok {
		return nil, connect.NewError(connect.CodeAlreadyExists, fmt.Errorf("Task.Id %s already exists", uuid.String()))
	}
	task := &todov1.Task{
		Id:      uuid.String(),
		Title:   req.Msg.Title,
		Content: req.Msg.Content,
		Status:  todov1.Task_STATUS_TODO_UNSPECIFIED,
	}
	s.store.Store(task.Id, task)
	res := connect.NewResponse(&todov1.CreateResponse{
		Task: task,
	})
	res.Header().Set("Todo-Version", "v1")
	stored, _ := s.store.Load(task.Id)
	log.Println("stored", stored)

	return res, nil
}

func (s *TaskServer) Delete(
	ctx context.Context,
	req *connect.Request[todov1.DeleteRequest],
) (*connect.Response[todov1.DeleteResponse], error) {
	log.Println("Request headers: ", req.Header())
	if _, ok := s.store.Load(req.Msg.Id); !ok {
		return nil, connect.NewError(connect.CodeNotFound, fmt.Errorf("Task.Id %s not found", req.Msg.Id))
	}
	s.store.Delete(req.Msg.Id)
	res := connect.NewResponse(&todov1.DeleteResponse{})
	res.Header().Set("Todo-Version", "v1")

	return res, nil
}

func main() {
	task := &TaskServer{}
	mux := http.NewServeMux()
	path, handler := todov1connect.NewTaskServiceHandler(task)
	mux.Handle(path, handler)
	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}
